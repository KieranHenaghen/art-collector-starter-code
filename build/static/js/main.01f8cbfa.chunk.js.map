{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","result","console","error","message","Feature","featuredResult","id","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","Fragment","map","person","key","displayname","length","image","baseimageurl","src","alt","Loading","Preview","searchResults","info","setFeaturedResult","fetchPage","pageUrl","results","disabled","prev","next","record","idx","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","catch","onSubmit","htmlFor","type","placeholder","onChange","target","name","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01f8cbfa.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=6c65eaea-b996-4007-876a-f59203292977';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { Fragment } from 'react';\n\nimport { fetchQueryResultsFromTermAndValue } from \"../api\";\n\n// // Don't touch this import\n// import { fetchQueryResultsFromTermAndValue } from '../api';\n\n// /**\n//  * We need a new component called Searchable which:\n//  * \n//  * Has a template like this:\n//  * \n//  * <span className=\"content\">\n//  *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n//  * </span>\n//  *\n//  * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n//  * \n//  * When someone clicks the anchor tag, you should:\n//  * \n//  * - preventDefault on the event\n//  * - call setIsLoading, set it to true\n//  * \n//  * Then start a try/catch/finally block:\n//  * \n//  * try:\n//  *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n//  *  - send the result to setSearchResults (which will update the Preview component)\n//  * catch: \n//  *  - console.error the error\n//  * finally:\n//  *  - call setIsLoading, set it to false\n//  */\nconst Searchable = (props) => {\n  const { searchTerm, searchValue, setIsLoading, setSearchResults } = props;\n\n  return <span className=\"content\">\n      <a href=\"#\" onClick={async (event) => {\n          event.preventDefault();\n          setIsLoading(true);\n          try {\n              const result = await fetchQueryResultsFromTermAndValue(searchTerm, searchValue);\n              setSearchResults(result);\n          }\n          catch (error) {\n              console.error(error.message);\n          }\n          finally {\n              setIsLoading(false);\n          }\n      }}>\n          { searchValue }\n      </a>\n  </span>\n}\n\n// /**\n//  * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n//  * \n//  * <main id=\"feature\"></main>\n//  * \n//  * And like this when one is:\n//  * \n//  * <main id=\"feature\">\n//  *   <div className=\"object-feature\">\n//  *     <header>\n//  *       <h3>OBJECT TITLE</h3>\n//  *       <h4>WHEN IT IS DATED</h4>\n//  *     </header>\n//  *     <section className=\"facts\">\n//  *       <span className=\"title\">FACT NAME</span>\n//  *       <span className=\"content\">FACT VALUE</span>\n//  *       <span className=\"title\">NEXT FACT NAME</span>\n//  *       <span className=\"content\">NEXT FACT VALUE</span>\n//  *     </section>\n//  *     <section className=\"photos\">\n//  *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n//  *     </section>\n//  *   </div>\n//  * </main>\n//  * \n//  * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n//  * technique, medium, dimensions, people, department, division, contact, creditline\n//  * \n//  * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n//  * \n//  * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n//  * \n//  * This component should be exported as default.\n//  */\nconst Feature = (props) => {\n    const { featuredResult } = props;\n    if (!featuredResult) {\n        return <main id=\"feature\"></main>\n    }\n    const { \n        title, \n        dated, \n        images, \n        primaryimageurl, \n        description, \n        culture, \n        style, \n        technique, \n        medium, \n        dimensions, \n        people, \n        department, \n        division, \n        contact, \n        creditline } = featuredResult;\n\n    return <main id=\"feature\">\n        <div className=\"object-feature\">\n            <header>\n                <h3>{ title }</h3>\n                <h4>{ dated }</h4>\n            </header>\n            <section className=\"facts\">\n                { description \n                ? <React.Fragment>\n                    <span className=\"title\">Description</span>\n                    <span className=\"content\">{ description }</span>\n                  </React.Fragment> \n                : null\n                }\n                { culture \n                ? <React.Fragment>\n                    <span className=\"title\">Culture</span>\n                    <Searchable searchTerm=\"culture\" searchValue={ culture } { ...props } />\n                  </React.Fragment> \n                : null\n                }\n                { style \n                ? <React.Fragment>\n                    <span className=\"title\">Style</span>\n                    <span className=\"content\">{ style }</span>\n                  </React.Fragment>\n                : null\n                }\n                { technique\n                ? <React.Fragment>\n                    <span className=\"title\">Technique</span>\n                    <Searchable searchTerm=\"technique\" searchValue={ technique } { ...props } />\n                  </React.Fragment>\n                : null\n                }\n                { medium\n                ? <React.Fragment>\n                    <span className=\"title\">Medium</span>\n                    <Searchable searchTerm=\"medium\" searchValue={ medium } { ...props } />\n                  </React.Fragment>\n                : null\n                }\n                { dimensions\n                ? <React.Fragment>\n                    <span className=\"title\">Dimensions</span>\n                    <span className=\"content\">{ dimensions }</span>\n                  </React.Fragment>\n                : null\n                }\n                { people\n                ? people.map(person => \n                    <React.Fragment key={person.displayname}>\n                        <span className=\"title\">People</span>\n                        <Searchable searchTerm=\"person\" searchValue={ person.displayname } { ...props } />\n                    </React.Fragment>\n                )\n                \n                : null\n                }\n                { department\n                ? <React.Fragment>\n                    <span className=\"title\">Department</span>\n                    <span className=\"content\">{ department }</span>\n                  </React.Fragment>\n                : null\n                }\n                { division\n                ? <React.Fragment>\n                    <span className=\"title\">Division</span>\n                    <span className=\"content\">{ division }</span>\n                  </React.Fragment>\n                : null\n                }\n                { contact\n                ? <React.Fragment>\n                    <span className=\"title\">Contact</span>\n                    <span className=\"content\">{ contact }</span>\n                </React.Fragment>\n                : null\n                }\n                { creditline\n                ? <React.Fragment>\n                    <span className=\"title\">Creditline</span>\n                    <span className=\"content\">{ creditline }</span>\n                  </React.Fragment>\n                : null\n                }\n            </section>\n            <section className=\"photos\">\n                {\n                    (images && images.length > 0)\n                    ? images.map(image =>\n                        <img key={ image.baseimageurl } src={ image.baseimageurl } alt={ image.baseimageurl } />\n                        )\n                    : primaryimageurl\n                    ? <img src={ primaryimageurl } alt={ primaryimageurl } />\n                    : null\n                }\n            </section>\n        </div>\n    </main>\n\n}\n\nexport default Feature;","import React from 'react';\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n * \n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\n\nconst Loading = (props) => {\n    return (\n        <div id='loading'>\n            <h2 className='message'>Searching...</h2>\n        </div>\n    )\n}\n\nexport default Loading;\n","import React from 'react';\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = (props) => {\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   * \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n\n  const { \n    searchResults : { info, records },\n    setFeaturedResult, \n    setIsLoading, \n    setSearchResults\n  } = props;\n\n  /**\n   * Don't touch this function, it's good to go.\n   * \n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return <aside id=\"preview\">\n    <header className=\"pagination\">\n      {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n      <button \n        disabled={!info.prev} \n        className=\"previous\"\n        onClick={() =>\n        fetchPage(info.prev)}>Previous</button>\n      {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n      <button\n        disabled={!info.next}\n        className=\"next\"\n        onClick={() =>\n        fetchPage(info.next)}>Next</button>\n    </header>\n    <section className=\"results\">\n      { records.map((record, idx) => {\n      return <div \n        key={ idx }\n        className=\"object-preview\"\n        onClick={(event) => {\n          event.preventDefault();\n          setFeaturedResult(record);\n          // prevent the default\n          // set the featured result to be this record, using setFeaturedResult\n        }}>\n        { \n          record.primaryimageurl ? <img src={ record.primaryimageurl } alt={ record.description } /> : null\n        // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n        }\n        {\n          record.title ? <h3>{ record.title }</h3> : <h3>MISSING INFO</h3>\n          // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n        }\n      </div>\n\n      \n      })\n        /* Here we should map over the records, and render something like this for each one:\n          <div  \n            key={ index }\n            className=\"object-preview\"\n            onClick={(event) => {\n              // prevent the default\n              // set the featured result to be this record, using setFeaturedResult\n            }}>\n            { \n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n            }\n            {\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n            }\n          </div>\n        */\n      }\n    </section>\n  </aside>\n}\n\nexport default Preview;","import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = (props) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n  \n  const { setIsLoading, setSearchResults } = props;\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   * \n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState('');\n  const [century, setCentury] = useState('any');\n  const [classification, setClassification] = useState('any');\n\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    Promise.all([fetchAllCenturies(), fetchAllClassifications()])\n    .then(([century, classification]) => {\n      setCenturyList(century);\n      setClassificationList(classification);\n    })\n    .catch(error => {\n      console.error(error.message)\n    })\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   * \n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   * \n   * catch: error to console.error\n   * \n   * finally: call setIsLoading, set it to false\n   */\n  return <form id=\"search\" onSubmit={async (event) => {\n    event.preventDefault();\n    setIsLoading(true);\n    try {\n      const results = await fetchQueryResults({ century, classification, queryString });\n      setSearchResults(results);\n    }\n    catch(err) {\n      console.error(err.message);\n    }\n    finally {\n      setIsLoading(false);\n    }\n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"enter keywords...\" \n        value={queryString} \n        onChange={(event) => setQueryString(event.target.value)}/>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\n      <select \n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification} \n        onChange={(event) => setClassification(event.target.value)}>\n        <option value=\"any\">Any</option>\n        { classificationList.map((classification, idx) => \n          <option key={`${ idx }:${classification.name}`} value={classification.name}>\n            {classification.name} </option>\n          ) \n        }\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\n      <select \n        name=\"century\" \n        id=\"select-century\"\n        value={century} \n        onChange={(event) => setCentury(event.target.value)}>\n        <option value=\"any\">Any</option>\n        { centuryList.map((century, idx) => \n          <option key={`${ idx }:${century.name}`} value={century.name}>\n            {century.name} </option>\n        )\n        }\n      </select>\n     </fieldset>\n    <button>SEARCH</button>\n  </form>\n}\n\nexport default Search;","import React from 'react';\n\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n * \n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\n\nconst Title = (props) => {\n    return (\n        <div id='title'>\n            <h1>\n                The Art Collector\n            </h1>\n            <h5>\n                Search the Harvard Art Museums' Private Collections\n            </h5>\n        </div>\n    )\n}\n\nexport default Title;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BASE_URL, KEY } from './api';\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n\n  const [searchResults, setSearchResults] = useState({\n    info: {},\n    records: []\n  });\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  return <div className=\"app\">\n    {/* <Title /> is static, doesn't need any props */}\n    <Title />\n\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n    <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n    \n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n    <Preview searchResults={searchResults} setIsLoading={setIsLoading} setSearchResults={setSearchResults} setFeaturedResult={setFeaturedResult} />\n    \n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    <Feature featuredResult={featuredResult} setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n    \n    {/* <Loading /> is static, but should only render when isLoading is true */}\n    {isLoading ? <Loading /> : null}; {/* use a ternary and render null if isLoading is false */}\n  </div>\n}\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n);"],"sourceRoot":""}